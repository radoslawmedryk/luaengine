function print(...)
	local list = {}
	for i,arg in ipairs({...}) do
		list[#list + 1] = tostring(arg)
	end
	_print(table.concat(list, "\t"))
end

function wait(from, to)
    local waitUntil = getTime() + ((to ~= nil) and math.random(from, to) or from)
    while getTime() < waitUntil do
        coroutine.yield()
    end
end

function InitializeSandboxEnv()
    local ENV = {
		print=print,
		wait=wait,
		
		assert=assert,
		error=error,
		ipairs=ipairs,
		next=next,
		pairs=pairs,
		pcall=pcall,
		select=select,
		tonumber=tonumber,
		tostring=tostring,
		type=type,
		_VERSION=_VERSION,
		xpcall=xpcall,
		coroutine = {	create = coroutine.create, resume = coroutine.resume, 
						--[[/!\ running = coroutine.running,]] status = coroutine.status, 
						wrap = coroutine.wrap, yield = coroutine.yield
					},
		string = 	{	byte = string.byte, char = string.char, --[[/!\ dump = string.dump,]] find = string.find, 
						format = string.format, gmatch = string.gmatch, gsub = string.gsub, 
						len = string.len, lower = string.lower, match = string.match, 
						rep = string.rep, reverse = string.reverse, sub = string.sub, 
						upper = string.upper
					},
		table = 	{	concat = table.concat, insert = table.insert, pack = table.pack,
						remove = table.remove, sort = table.sort, unpack = table.unpack
					},
		math = 		{	abs = math.abs, acos = math.acos, asin = math.asin, 
						atan = math.atan, atan2 = math.atan2, ceil = math.ceil, cos = math.cos, 
						cosh = math.cosh, deg = math.deg, exp = math.exp, floor = math.floor, 
						fmod = math.fmod, frexp = math.frexp, huge = math.huge, 
						ldexp = math.ldexp, log = math.log, max = math.max, 
						min = math.min, modf = math.modf, pi = math.pi, pow = math.pow, 
						rad = math.rad, random = math.random, sin = math.sin, sinh = math.sinh, 
						sqrt = math.sqrt, tan = math.tan, tanh = math.tanh
					},
		os =		{	clock = os.clock, date = os.date, difftime = os.difftime, time = os.time
					},
	}
	setmetatable(ENV,{
		__index = {_G = ENV},
		__newindex = function(t,k,v) if (k ~= "_G") then rawset(t,k,v) end end
	})
	
	for k,func in pairs(_G) do
		if (string.len(k) > 4 and string.sub(k, 1, 4) == "_CS_") then
			ENV[string.sub(k,5)] = func
		end
	end
	
	return ENV
end